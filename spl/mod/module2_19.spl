breakpoint;
alias functionNum R1;

//get freepage

if(functionNum==1) then
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
	while([SYSTEM_STATUS_TABLE+2]==0) do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
		call SCHEDULER;
	endwhile;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
	alias counter R2;
	counter=76;
	while(counter<128) do
		if([MEMORY_FREE_LIST+counter]==0) then
			[MEMORY_FREE_LIST+counter]=1;
			R0=counter;
breakpoint;			
			return;
		endif;
	
		counter=counter+1;
	endwhile;
	
endif;

//release page


if(functionNum==2) then
	alias pageNo R2;
	[MEMORY_FREE_LIST+pageNo]=[MEMORY_FREE_LIST+pageNo]-1;
	if([MEMORY_FREE_LIST+pageNo]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	endif;
	alias counter R3;
	counter=0;
	while(counter<16) do
		if([PROCESS_TABLE+16*counter+4]==WAIT_MEM) then
			[PROCESS_TABLE+16*counter+4]=READY;
		endif;
		counter=counter+1;
	endwhile;
breakpoint;	
	return;

endif;

if(functionNum==4) then
	alias blockNo R2;
	alias PID R3;
	[DISK_FREE_LIST+blockNo]=[DISK_FREE_LIST+blockNo]-1;
	return;

endif;


if(functionNum==5) then
	alias blockNo R2;
	alias counter R3;
	counter=0;
	while(counter<16) do
		if([DISK_MAP_TABLE+10*counter+4]==blockNo) then
			if([[PROCESS_TABLE+16*counter+14]+9]=="0100") then
				R0=[[PROCESS_TABLE+16*counter+14]+8];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				
				return;
			endif;
		endif;
		if([DISK_MAP_TABLE+10*counter+5]==blockNo) then
			if([[PROCESS_TABLE+16*counter+14]+11]=="0100") then
				R0=[[PROCESS_TABLE+16*counter+14]+10];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		
		endif;
		if([DISK_MAP_TABLE+10*counter+6]==blockNo) then
			if([[PROCESS_TABLE+16*counter+14]+13]=="0100") then
				R0=[[PROCESS_TABLE+16*counter+14]+12];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		endif;
		if([DISK_MAP_TABLE+10*counter+7]==blockNo) then
			if([[PROCESS_TABLE+16*counter+14]+15]=="0100") then
				R0=[[PROCESS_TABLE+16*counter+14]+14];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				return;
			endif;
		endif;
		counter=counter+1;
	endwhile;
	
	multipush(R1,R2);
	R1=1;
	call MEMORY_MANAGER;
	multipop(R1,R2);
	
	multipush(R0);
	R1=2;
	R4=blockNo;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=R0;
	
	call DEVICE_MANAGER;
	multipop(R0);
	breakpoint;
	return;

endif;

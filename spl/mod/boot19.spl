breakpoint;

//load init/login code
loadi(65, 7);
loadi(66, 8);

//load interrupt routine for INT=10
loadi(22, 35);
loadi(23, 36);

//load code for exception handler
loadi(2, 15);
loadi(3, 16);

//load interrupt routine for timer
loadi(4, 17);
loadi(5, 18);

//load interrupt routine for write
loadi(16, 29);
loadi(17, 30);

//load library code
loadi(63, 13);
loadi(64, 14);

//load even nos code (exec file)
loadi(83, 69);

//load MODULE_0
loadi(40,53);
loadi(41,54);

//load MODULE_1
loadi(42,55);
loadi(43,56);

//load MODULE_2
loadi(44,57);
loadi(45,58);

//load MODULE_4
loadi(48,61);
loadi(49,62);

//load MODULE_5
loadi(50, 63);
loadi(51, 64);

//console_int
loadi(8,21);
loadi(9,22);

//int_6
loadi(14,27);
loadi(15,28);

//int_9
loadi(20,33);
loadi(21,34);

//inode_table
loadi(59,3);
loadi(60,4);

//disk interrupt
loadi(6,19);
loadi(7,20);

//disk freelist
loadi(61,2);

//exp handler
loadi(6,19);
loadi(7,20);



//...............FOR INIT PROCESS...............
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+11]=80;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+16+15]=10;

[76*512] = [65 * 512 + 1];


alias count R0;
count=32;
while(count<=240) do
	[PROCESS_TABLE + count + 4]=TERMINATED;
	count=count+16;
endwhile;

[TERMINAL_STATUS_TABLE]=0;

count =0;
while(count<128)do
  	if(count<83)then
  		[MEMORY_FREE_LIST+count]=1;
  	else
  		[MEMORY_FREE_LIST+count]=0;
  	endif;
  	count=count+1;
endwhile;

[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;


[DISK_STATUS_TABLE]=0;

count=1;
while(count<=8)do
	[([PROCESS_TABLE+11]+1)*512- 2*count]=-1;
	count=count+1;

endwhile;

count=0;
while(count<10)do
	[DISK_MAP_TABLE+10+count]=-1;
	count=count+1;
	
endwhile;
[DISK_MAP_TABLE+10+4]=65;
[DISK_MAP_TABLE+10+5]=66;


breakpoint;
return;


